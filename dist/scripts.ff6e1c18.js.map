{"version":3,"sources":["scripts.js"],"names":["searchInput","document","querySelector","cityName","day","humidity","wind","pressure","image","temprature","forecastBock","forecastIcon","forecastDay","forecasttemp","suggestions","APIKey","endpoint","forecastEndpoint","cityBaseEndpoint","englishAl","alph","images","url","id","getWeatherByCityName","name","fetch","baseEndpoint","responce","status","alert","json","results","request","XMLHttpRequest","open","onload","details","response","cities","JSON","parse","city","textContent","send","getForecastbyCityId","daily","forecast","forecastList","list","forEach","Date","dt_txt","getHours","push","updateCurrentWeather","dayOfWeek","main","deg","deriection","speed","toFixed","Math","floor","temp","weather","obj","includes","setAttribute","updateForecast","innerHTML","iconURL","icon","weekday","dt","forecastItem","insertAdjacentHTML","getTime","toLocaleDateString","weatherForCity","cityId","dailyInfo","init","then","body","style","filter","addEventListener","e","key","textAlign","getAttribute","color","keyCode","value","i","console","log","_embedded","length","option","createElement","matching_alternate_names","appendChild"],"mappings":"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","file":"scripts.ff6e1c18.js","sourceRoot":"..","sourcesContent":["\r\nlet searchInput = document.querySelector('.weather__search');\r\nlet cityName = document.querySelector('.weather__city');\r\nlet day = document.querySelector('.weather__day');\r\nlet humidity = document.querySelector('.weather__indicators--humidity>.value');\r\nlet wind = document.querySelector('.weather__indicators--wind>.value');\r\nlet pressure = document.querySelector('.weather__indicators--pressure>.value');\r\nlet image = document.querySelector('.weather__image');\r\nlet temprature = document.querySelector('.weather__temp>.value');\r\nlet forecastBock = document.querySelector('.weahter__forecast');\r\nlet forecastIcon = document.querySelector('.weather__forecast__icon');\r\nlet forecastDay = document.querySelector('.weather__forecast__day');\r\nlet forecasttemp = document.querySelector('.weather__forecast__temprature');\r\nlet suggestions = document.querySelector('.suggestion');\r\n\r\n\r\nlet APIKey = 'f999dc164b9448e80899d77c2d3c6a56';\r\nlet endpoint = 'https://api.openweathermap.org/data/2.5/weather?units=metric&appid=' + APIKey;\r\nlet forecastEndpoint = 'https://api.openweathermap.org/data/2.5/forecast?units=metric&appid=' + APIKey;\r\nlet cityBaseEndpoint = 'https://api.teleport.org/api/cities/?search=';\r\n\r\n\r\nlet englishAl = [\r\n  {alph : 'a'},\r\n  {alph : 'b'},\r\n  {alph : 'c'},\r\n  {alph : 'd'},\r\n  {alph : 'e'},\r\n  {alph : 'f'},\r\n  {alph : 'g'},\r\n  {alph : 'h'},\r\n  {alph : 'i'},\r\n  {alph : 'j'},\r\n  {alph : 'k'},\r\n  {alph : 'l'},\r\n  {alph : 'm'},\r\n  {alph : 'n'},\r\n  {alph : 'o'},\r\n  {alph : 'p'},\r\n  {alph : 'q'},\r\n  {alph : 'r'},\r\n  {alph : 's'},\r\n  {alph : 't'},\r\n  {alph : 'u'},\r\n  {alph : 'v'},\r\n  {alph : 'w'},\r\n  {alph : 'x'},\r\n  {alph : 'y'},\r\n  {alph : 'z'}\r\n];\r\n\r\n\r\nlet images = [\r\n  {\r\n    url : 'images/lightning2.png',\r\n    id : [200 , 201 , 202 , 210 , 211 , 212 , 221 , 230 , 231 , 232]\r\n  },\r\n  {\r\n    url : 'images/rain2.png',\r\n    id : [500 , 501 , 502 ,503 ,504]\r\n  },\r\n  {\r\n    url : 'images/shower-rain2.png',\r\n    id : [520 , 521 , 522 , 531]\r\n  },\r\n  {\r\n    url : 'images/mist2.png',\r\n    id : [701, 711 , 721 ,731 , 741 , 751 , 761 ,762 , 771 , 781]\r\n  },\r\n  {\r\n    url : 'images/sunny2.png',\r\n    id : [800]\r\n  },\r\n  {\r\n    url : 'images/snowy2.png',\r\n    id : [600 , 601 , 602 , 611 , 612 ,613 ,614 ,615, 616 , 620 , 621 ,622]\r\n  },\r\n  {\r\n    url : 'images/partly-cloudy2.png',\r\n    id : [801]\r\n  },\r\n  {\r\n    url : 'images/scatter-clouds2.png',\r\n    id : [802]\r\n  },\r\n  {\r\n    url : 'images/broken-clouds2.png',\r\n    id : [803,804]\r\n  }\r\n  \r\n]\r\n\r\n\r\n\r\nlet getWeatherByCityName = async(name) =>{\r\n  let baseEndpoint = endpoint + '&q=' + name;\r\n  let responce = await fetch(baseEndpoint);\r\n  if(responce.status !== 200){\r\n    alert('city not found');\r\n    return;\r\n  }\r\n  let results =await responce.json();\r\n  let request = new XMLHttpRequest();\r\n  request.open('GET' , './cities.json');\r\n  request.onload = function(){\r\n    details = request.response;\r\n    cities = JSON.parse(details);\r\n    for (let city of cities) {\r\n       if(city.name === name){\r\n         cityName.textContent = city.name;\r\n         break;\r\n       }else{\r\n        cityName.textContent = results.name;\r\n       }\r\n      };\r\n  }\r\n  request.send();\r\n  return results;\r\n}\r\n\r\nlet getForecastbyCityId = async(id) =>{\r\n  let baseEndpoint = forecastEndpoint + '&id=' + id;\r\n  let results = await fetch(baseEndpoint);\r\n  let forecast = await results.json();\r\n  let forecastList = forecast.list;\r\n  let daily = [];\r\n  forecastList.forEach(day =>{\r\n    let date = new Date(day.dt_txt);\r\n    let hour = date.getHours();\r\n    if( hour === 12){\r\n      daily.push(day);\r\n    }\r\n  })\r\n  return daily;\r\n}\r\n\r\n\r\nlet updateCurrentWeather = async(city) =>{\r\n  day.textContent = dayOfWeek();\r\n  humidity.textContent = city.main.humidity;\r\n  pressure.textContent = city.main.pressure;\r\n  let deriection;\r\n  let deg = city.wind.deg;\r\n  if(deg > 45 && deg<=135){\r\n    deriection = 'شرق';\r\n  }else if(deg > 135 && deg<=225){\r\n    deriection = 'جنوب';\r\n  }else if( deg > 225 && deg <= 315){\r\n    deriection = 'غرب';\r\n  }else if(deg > 315 && deg <= 45){\r\n    deriection = 'شمال';\r\n  }\r\n  wind.textContent = deriection + ' _ ' + city.wind.speed.toFixed(0);\r\n  temprature.textContent = (Math.floor(city.main.temp))>0 ? '+' + (Math.floor(city.main.temp)):  (Math.floor(city.main.temp));\r\n  let weather = city.weather[0].id;\r\n  images.forEach(obj =>{\r\n    if(obj.id.includes(weather)){\r\n      image.setAttribute('src' , obj.url);\r\n    }\r\n  })\r\n  \r\n}\r\n\r\nlet updateForecast = async(forecast) => {\r\n  forecastBock.innerHTML='';\r\n  forecast.forEach(day =>{\r\n    let iconURL = 'http://openweathermap.org/img/wn/' + day.weather[0].icon + '@2x.png';\r\n    \r\n    let weekday = dayOfWeek(day.dt*1000)\r\n    let temp = (Math.floor(day.main.temp))>0 ? '+' +(Math.floor(day.main.temp)):  (Math.floor(day.main.temp));\r\n    let forecastItem = `\r\n    <article class=\"weather__forecast__item\">\r\n      <img src=${iconURL} alt=\"\" class=\"weather__forecast__icon\">\r\n      <h3 class=\"weather__forecast__day\">${weekday}</h3>\r\n      <p dir=\"ltr\" class=\"weather__forecast__temprature\"><span class=\"value\">${temp}</span>&deg;c</p>\r\n    </article>`;\r\n    forecastBock.insertAdjacentHTML('afterbegin' , forecastItem);\r\n\r\n\r\n  })\r\n}\r\n\r\n\r\nlet dayOfWeek = (dt = new Date().getTime()) =>{\r\n  return new Date(dt).toLocaleDateString('fa-IR' , {'weekday' : 'long'});\r\n}\r\n\r\nlet weatherForCity = async (city) =>{\r\n  let weather = await getWeatherByCityName(city);\r\n  if (!weather) return;\r\n  updateCurrentWeather(weather);\r\n  let cityId = weather.id;\r\n  let dailyInfo = await getForecastbyCityId(cityId);\r\n  updateForecast(dailyInfo);\r\n}\r\n\r\nlet init = () => {\r\n  weatherForCity('تهران').then( () => document.body.style.filter = 'blur(0)');\r\n}\r\n\r\ninit();\r\n\r\nsearchInput.addEventListener('keydown' ,  async(e) =>{\r\n  englishAl.forEach(alph =>{\r\n    if (alph.alph === e.key){\r\n      searchInput.style.textAlign = 'left';\r\n      searchInput.getAttribute('dir' , 'ltr');\r\n      searchInput.setAttribute('placeholder' , \"city's name\");\r\n      searchInput.style.color = '#3b6a7e';\r\n    }\r\n  })\r\n  if(e.keyCode === 13){\r\n  weatherForCity(searchInput.value);\r\n  }\r\n})\r\n\r\nsearchInput.addEventListener('input' , async(e) =>{\r\n  let endpoint = cityBaseEndpoint + searchInput.value;\r\n  let results = await(await fetch(endpoint)).json();\r\n  console.log(results);\r\n  let cities = results._embedded['city:search-results'];\r\n  suggestions.innerHTML= '';\r\n  console.log(cities);\r\n  let length = (cities.length > 8) ? 8 : cities.length;\r\n  for (let i = 0 ; i <= length ; i++){\r\n    let option = document.createElement('option');\r\n    option.value = cities[i].matching_alternate_names[0].name;\r\n    suggestions.appendChild(option);\r\n  }\r\n})\r\n"]}